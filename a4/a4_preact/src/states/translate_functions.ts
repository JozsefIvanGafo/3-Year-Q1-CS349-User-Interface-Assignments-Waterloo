/* 
University of Waterloo 2023-24 / CS 349 / A4
József Iván Gafo / WatId: 21111635 / jivangaf@uwaterloo.ca
Description:
This module is in charge of containing functions to translate colors
source: MAde by Chat gpt
*/

export function hslToHex(h: number, s: number, l: number): string {
    h = (h + 360) % 360; // Ensure h is in the range [0, 360)
    s /= 100; // Normalize s to the range [0, 1]
    l /= 100; // Normalize l to the range [0, 1]
  
    const c = (1 - Math.abs(2 * l - 1)) * s;
    const x = c * (1 - Math.abs(((h / 60) % 2) - 1));
    const m = l - c / 2;
  
    let r: number, g: number, b: number;
  
    if (h < 60) {
      r = c;
      g = x;
      b = 0;
    } else if (h < 120) {
      r = x;
      g = c;
      b = 0;
    } else if (h < 180) {
      r = 0;
      g = c;
      b = x;
    } else if (h < 240) {
      r = 0;
      g = x;
      b = c;
    } else if (h < 300) {
      r = x;
      g = 0;
      b = c;
    } else {
      r = c;
      g = 0;
      b = x;
    }
  
    // Convert to 8-bit values
    const intToHex = (value: number) => Math.round(value * 255).toString(16).padStart(2, '0');
    const hexR = intToHex(r + m);
    const hexG = intToHex(g + m);
    const hexB = intToHex(b + m);
  
    return `#${hexR}${hexG}${hexB}`;
  }
  
  export function hexToHsl(hex: string): [number, number, number] | null {
    // Remove the hash (#) if present
    hex = hex.replace(/^#/, '');
  
    // Ensure the hex code is valid
    if (!/^[0-9A-Fa-f]{6}$|^[0-9A-Fa-f]{3}$/.test(hex)) {
      return null;
    }
  
    // Expand short hex to full hex
    if (hex.length === 3) {
      hex = hex.replace(/./g, (char) => char + char);
    }
  
    const bigint = parseInt(hex, 16);
    const r = (bigint >> 16) & 255;
    const g = (bigint >> 8) & 255;
    const b = bigint & 255;
  
    const normalizedR = r / 255;
    const normalizedG = g / 255;
    const normalizedB = b / 255;
  
    const max = Math.max(normalizedR, normalizedG, normalizedB);
    const min = Math.min(normalizedR, normalizedG, normalizedB);
    const delta = max - min;
  
    let h = 0;
    let s = 0;
    let l = (max + min) / 2;
  
    if (delta !== 0) {
      s = delta / (1 - Math.abs(2 * l - 1));
  
      switch (max) {
        case normalizedR:
          h = ((normalizedG - normalizedB) / delta + (normalizedG < normalizedB ? 6 : 0)) * 60;
          break;
        case normalizedG:
          h = ((normalizedB - normalizedR) / delta + 2) * 60;
          break;
        case normalizedB:
          h = ((normalizedR - normalizedG) / delta + 4) * 60;
          break;
      }
    }
  
    return [h,s * 100, l * 100];
  }
  
  function hueToRgb(p: number, q: number, t: number): number {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
    return p;
  }
  
  /**
 * Generated by chat GPT
 * @param r number
 * @param g number
 * @param b number
 * @returns HSL values
 */
export function rgbToHsl(r: number, g: number, b: number): [number, number, number] {
  // Normalize RGB values
  const normalizedR = r / 255;
  const normalizedG = g / 255;
  const normalizedB = b / 255;

  // Find the maximum and minimum values
  const max = Math.max(normalizedR, normalizedG, normalizedB);
  const min = Math.min(normalizedR, normalizedG, normalizedB);

  // Calculate the lightness
  const lightness = (max + min) / 2;

  // Calculate the saturation
  let saturation;
  if (max === min) {
    saturation = 0;
  } else {
    saturation =
      lightness <= 0.5
        ? (max - min) / (max + min)
        : (max - min) / (2 - max - min);
  }

  // Calculate the hue
  let hue;
  if (max === min) {
    hue = 0;
  } else if (max === normalizedR) {
    hue = ((normalizedG - normalizedB) / (max - min)) % 6;
  } else if (max === normalizedG) {
    hue = (normalizedB - normalizedR) / (max - min) + 2;
  } else {
    hue = (normalizedR - normalizedG) / (max - min) + 4;
  }

  // Convert hue to degrees
  hue *= 60;
  if (hue < 0) {
    hue += 360;
  }

  return [hue, saturation * 100, lightness * 100];
}


/**
 * Generated by chat GPT
 * @param h 
 * @param s 
 * @param l 
 * @returns RGB
 */
export function hslToRgb(h: number, s: number, l: number): [number, number, number] {
  // Convert hue to a value between 0 and 1
  const hue = h / 360;

  // Convert saturation and lightness to values between 0 and 1
  const saturation = s / 100;
  const lightness = l / 100;

  // Calculate intermediate values
  const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
  const p = 2 * lightness - q;

  // Calculate RGB values
  const r = hueToRgb(p, q, hue + 1 / 3);
  const g = hueToRgb(p, q, hue);
  const b = hueToRgb(p, q, hue - 1 / 3);

  // Scale RGB values to 0-255 range
  return [r * 255, g * 255,b * 255];
}


